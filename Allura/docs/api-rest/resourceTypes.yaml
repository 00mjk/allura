- base:
    get?:
      responses: &standardResponses  # yaml syntax to alias properties
        200:
          description: OK
    put?:
      responses: *standardResponses
    patch?:
      responses: *standardResponses
    post?:
      responses:
        201:
          description: Created
    delete?:
      responses: *standardResponses
- collection:
    type: base
    get:
      is: [ pageable, bearerAuth ]
- generic:
    # this is really just a shorthand for us when we have a schema & example
    # so we couldn't come up with a good name and picked something generic :)
    type: base
    get:
      is: [ bearerAuth ]
      responses:
        200:
          body:
            application/json:
              schema: <<schema>>
              example: <<example>>
    post?:
    put?:
      body:
        application/json:
          schema: <<schema>>
      responses:
        200:
          body:
            application/json:
              schema: <<schema>>
    patch?:
      body:
        application/json:
          schema: <<schema>>
      responses:
        200:
          body:
            application/json:
              schema: <<schema>>
    delete?:
- searchableCollection:
    get:
      is: [ bearerAuth ]
      queryParameters:
        <<queryParamName>>:
          description: Return <<resourcePathName>> that have their <<queryParamName>> matching the given value
      responses:
        200:
          body:
            application/json:
              schema: <<schema>>
              example: <<example>>
- typedCollection:
    type: collection
    get:
      responses:
        200:
          body:
            application/json:
              schema: <<schema>>
              example: <<example>>
- permission:
    description: |
      Checks if a given user has permissions.
    get:
      is: [permissionTestable, bearerAuth]
- project:
    type: base
    get:
      responses:
        200:
          body:
            application/json:
              schema: <<schema>>
              example: <<example>>


